---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import AboutMe from '../components/AboutMe.astro';
import Projects from '../components/Projects.astro';
import Services from '../components/Services.astro';
import ContactForm from '../components/ContactForm.astro';

// Datos estructurados para SEO
const pageTitle = "Jason Guerra | Desarrollador Frontend Freelance - Especializado en Web Modernas y Atractivas";
const pageDescription = "Portfolio profesional de Jason Guerra, desarrollador frontend freelance en La Habana, Cuba. Especializado en crear sitios web modernos, rápidos y optimizados para SEO utilizando Astro, React, TypeScript y TailwindCSS. Diseño responsive, alta velocidad de carga y excelente experiencia de usuario.";
const pageKeywords = "Jason Guerra, desarrollador frontend, thejasondev, portfolio, SEO, diseño web, proyectos web, Jason Guerra, desarrollo web Cuba, desarrollo web La Habana, Astro, React, TypeScript, TailwindCSS, diseño responsive, frontend freelance, desarrollo sitios web, sitios web optimizados, rendimiento web";
---

<Layout 
  title={pageTitle}
  description={pageDescription}
  keywords={pageKeywords}
  datePublished="2025-04-21"
  dateModified={new Date().toISOString().split('T')[0]}
  type="website"
>
  <Header />
  <main class="pt-16 content-visibility-auto">
    <!-- Schema.org ProfilePage con mainEntity -->
    <script type="application/ld+json" set:html={JSON.stringify({
      "@context": "https://schema.org",
      "@type": "ProfilePage",
      "mainEntity": {
        "@type": "Person",
        "@id": "https://thejasondev.vercel.app/#person",
        "name": "Jason Guerra",
        "alternateName": "thejasondev",
        "jobTitle": "Desarrollador Frontend",
        "sameAs": [
          "https://github.com/thejasondev",
          "https://linkedin.com/in/thejasondev",
          "https://instagram.com/thejasondev",
          "https://wa.me/+5353118193"
        ]
      },
      "url": "https://thejasondev.vercel.app/",
      "name": "Portfolio de Jason Guerra - Desarrollador Frontend (thejasondev)",
      "description": "Portfolio profesional de Jason Guerra (thejasondev), desarrollador frontend especializado en crear sitios web modernos, rápidos y optimizados para SEO."
    })}></script>
    
    <!-- AboutMe con fade-up - PRIORIDAD MÁS ALTA - Deferred hydration -->
    <section class="scroll-reveal-section" style="contain: content;">
      <div class="scroll-reveal animate-fade-up priority-high">
        <AboutMe />
      </div>
    </section>
    
    <!-- Projects con fade-left y elementos destacados - Deferred loading -->
    <section class="scroll-reveal-section" style="contain: content;">
      <div class="scroll-reveal animate-fade-left priority-medium">
        <Projects />
      </div>
    </section>
    
    <!-- Services con scale-up y aparición secuencial - Lazy loading -->
    <section class="scroll-reveal-section card-container" style="contain: content;">
      <div class="scroll-reveal animate-scale-up priority-low">
        <Services />
      </div>
    </section>
    
    <!-- ContactForm con fade-up y blur - Lazy loading -->
    <section class="scroll-reveal-section" style="contain: content;">
      <div class="scroll-reveal animate-fade-up fade-in-blur priority-low">
        <ContactForm />
      </div>
    </section>
  </main>
</Layout>

<style>
  .scroll-reveal-section {
    position: relative;
    overflow: hidden;
    content-visibility: auto;
    contain-intrinsic-size: 1px 500px; /* Valor estimado para reservar espacio */
  }
  
  /* Ajuste básico para el scroll-reveal */
  .scroll-reveal {
    opacity: 0;
    animation-play-state: paused;
    will-change: opacity, transform;
  }
  
  .scroll-reveal.revealed {
    animation-play-state: running;
  }
</style>

<script>
  // Configuración más eficiente del Intersection Observer para efectos de scroll
  document.addEventListener('DOMContentLoaded', () => {
    // Opciones del observer optimizadas para móviles
    const options = {
      root: null,
      rootMargin: '0px',
      threshold: 0.05 // Umbral reducido para móviles
    };
    
    // Inicialización del observer con optimizaciones
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          // Dar prioridad a elementos marcados como priority-high
          const isPriority = entry.target.classList.contains('priority-high');
          
          // Usar rAF para elementos prioritarios, setTimeout para el resto
          if (isPriority) {
            requestAnimationFrame(() => {
              entry.target.classList.add('revealed');
            });
          } else {
            setTimeout(() => {
              entry.target.classList.add('revealed');
            }, 100); // Retraso mínimo para elementos no prioritarios
          }
          
          // Animación secuencial optimizada para tarjetas con menor impacto
          if (entry.target.classList.contains('card-container')) {
            const cards = Array.from(entry.target.querySelectorAll('.card'));
            // Solo animar las primeras 3 tarjetas de inmediato
            cards.slice(0, 3).forEach((card, index) => {
              requestAnimationFrame(() => {
                setTimeout(() => {
                  card.classList.add('revealed');
                }, 50 * index);
              });
            });
            
            // Animar el resto después
            if (cards.length > 3) {
              setTimeout(() => {
                cards.slice(3).forEach((card, index) => {
                  card.classList.add('revealed');
                });
              }, 300);
            }
          }
          
          // Dejar de observar después de revelar para ahorrar recursos
          observer.unobserve(entry.target);
        }
      });
    }, options);
    
    // Primero observar elementos prioritarios
    const priorityElements = document.querySelectorAll('.priority-high');
    priorityElements.forEach(el => observer.observe(el));
    
    // Luego observar el resto de elementos con retraso para priorizar LCP
    setTimeout(() => {
      document.querySelectorAll('.scroll-reveal:not(.priority-high), .card-container').forEach(el => 
        observer.observe(el)
      );
    }, 100);
    
    // Eficiente manejo de paralaje - usando requestAnimationFrame
    const parallaxElements = document.querySelectorAll('.parallax-scroll');
    if (parallaxElements.length > 0) {
      let ticking = false;
      let lastScrollPos = window.scrollY;
      
      window.addEventListener('scroll', () => {
        lastScrollPos = window.scrollY;
        
        if (!ticking) {
          requestAnimationFrame(() => {
            parallaxElements.forEach(el => {
              const htmlEl = el as HTMLElement;
              const speed = htmlEl.dataset.parallaxSpeed || '0.1';
              const offset = lastScrollPos * parseFloat(speed);
              htmlEl.style.transform = `translateY(${offset}px)`;
            });
            ticking = false;
          });
          
          ticking = true;
        }
      });
    }
  });
</script>
