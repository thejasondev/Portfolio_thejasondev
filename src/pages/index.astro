---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import AboutMe from '../components/AboutMe.astro';
import Projects from '../components/Projects.astro';
import Services from '../components/Services.astro';
import ContactForm from '../components/ContactForm.astro';

// Datos estructurados para SEO
const pageTitle = "Jason Guerra | Desarrollador Frontend Freelance - Especializado en Web Modernas y Atractivas";
const pageDescription = "Portfolio profesional de Jason Guerra, desarrollador frontend freelance en La Habana, Cuba. Especializado en crear sitios web modernos, rápidos y optimizados para SEO utilizando Astro, React, TypeScript y TailwindCSS. Diseño responsive, alta velocidad de carga y excelente experiencia de usuario.";
const pageKeywords = "Jason Guerra, desarrollador frontend, thejasondev, portfolio, SEO, diseño web, proyectos web, Jason Guerra, desarrollo web Cuba, desarrollo web La Habana, Astro, React, TypeScript, TailwindCSS, diseño responsive, frontend freelance, desarrollo sitios web, sitios web optimizados, rendimiento web";
---

<Layout 
  title={pageTitle}
  description={pageDescription}
  keywords={pageKeywords}
  datePublished="2025-04-21"
  dateModified={new Date().toISOString().split('T')[0]}
  type="website"
>
  <Header />
  <main class="pt-16">
    <!-- Schema.org ProfilePage con mainEntity -->
    <script type="application/ld+json">
      {
        JSON.stringify({
          "@context": "https://schema.org",
          "@type": "ProfilePage",
          "mainEntity": {
            "@type": "Person",
            "@id": "https://thejasondev.vercel.app/#person",
            "name": "Jason Guerra",
            "alternateName": "thejasondev",
            "jobTitle": "Desarrollador Frontend",
            "sameAs": [
              "https://github.com/thejasondev",
              "https://linkedin.com/in/thejasondev",
              "https://instagram.com/thejasondev",
              "https://wa.me/+5353118193"
            ]
          },
          "url": "https://thejasondev.vercel.app/",
          "name": "Portfolio de Jason Guerra - Desarrollador Frontend (thejasondev)",
          "description": "Portfolio profesional de Jason Guerra (thejasondev), desarrollador frontend especializado en crear sitios web modernos, rápidos y optimizados para SEO."
        })
      }
    </script>
    
    <!-- AboutMe con fade-up -->
    <section class="scroll-reveal-section">
      <div class="scroll-reveal animate-fade-up">
        <AboutMe />
      </div>
    </section>
    
    <!-- Projects con fade-left y elementos destacados -->
    <section class="scroll-reveal-section">
      <div class="scroll-reveal animate-fade-left">
        <Projects />
      </div>
    </section>
    
    <!-- Services con scale-up y aparición secuencial -->
    <section class="scroll-reveal-section card-container">
      <div class="scroll-reveal animate-scale-up">
        <Services />
      </div>
    </section>
    
    <!-- ContactForm con fade-up y blur -->
    <section class="scroll-reveal-section">
      <div class="scroll-reveal animate-fade-up fade-in-blur">
        <ContactForm />
      </div>
    </section>
  </main>
</Layout>

<style>
  .scroll-reveal-section {
    position: relative;
    overflow: hidden;
    content-visibility: auto;
    contain-intrinsic-size: 1px 500px; /* Valor estimado para reservar espacio */
  }
  
  /* Ajuste básico para el scroll-reveal */
  .scroll-reveal {
    opacity: 0;
    animation-play-state: paused;
    will-change: opacity, transform;
  }
  
  .scroll-reveal.revealed {
    animation-play-state: running;
  }
</style>

<script>
  // Configuración más eficiente del Intersection Observer para efectos de scroll
  document.addEventListener('DOMContentLoaded', () => {
    // Opciones del observer - simplificadas para mejor rendimiento
    const options = {
      root: null,
      rootMargin: '0px 0px -10% 0px',
      threshold: 0.1 // Un solo umbral para mejor rendimiento
    };
    
    // Inicialización del observer
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('revealed');
          
          // Animación secuencial optimizada para tarjetas
          if (entry.target.classList.contains('card-container')) {
            const cards = entry.target.querySelectorAll('.card');
            cards.forEach((card, index) => {
              requestAnimationFrame(() => {
                setTimeout(() => {
                  card.classList.add('revealed');
                }, 80 * index); // Tiempos más cortos
              });
            });
          }
          
          // Dejar de observar después de revelar para ahorrar recursos
          observer.unobserve(entry.target);
        }
      });
    }, options);
    
    // Observar elementos - usando requestIdleCallback para no bloquear
    if ('requestIdleCallback' in window) {
      requestIdleCallback(() => {
        document.querySelectorAll('.scroll-reveal, .card-container').forEach(el => 
          observer.observe(el)
        );
      });
    } else {
      // Fallback para navegadores sin requestIdleCallback
      setTimeout(() => {
        document.querySelectorAll('.scroll-reveal, .card-container').forEach(el => 
          observer.observe(el)
        );
      }, 200);
    }
    
    // Eficiente manejo de paralaje - usando requestAnimationFrame
    const parallaxElements = document.querySelectorAll('.parallax-scroll');
    if (parallaxElements.length > 0) {
      let ticking = false;
      let lastScrollPos = window.scrollY;
      
      window.addEventListener('scroll', () => {
        lastScrollPos = window.scrollY;
        
        if (!ticking) {
          requestAnimationFrame(() => {
            parallaxElements.forEach(el => {
              const htmlEl = el as HTMLElement;
              const speed = htmlEl.dataset.parallaxSpeed || '0.1';
              const offset = lastScrollPos * parseFloat(speed);
              htmlEl.style.transform = `translateY(${offset}px)`;
            });
            ticking = false;
          });
          
          ticking = true;
        }
      });
    }
  });
</script>